import logging
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timezone, timedelta
import os

TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
start_time = datetime.now(timezone(timedelta(hours=5)))

async def notify_new_lead(lead: dict, missed=False):
    status = "‚ùå <b>–£–ü–£–©–ï–ù</b>" if missed else "üìå –õ–∏–¥ –ø—Ä–∏–Ω—è—Ç"
    comment = lead.get("comment", "‚Äî")

    text = (
        f"{status} ‚Ññ<b>{lead['id']}</b>\n"
        f"üë§ <b>{lead['client']}</b>\n"
        f"üèôÔ∏è <b>{lead['apartment']}</b>\n"
        f"üìÖ <b>{lead['date']}</b>\n"
        f"üõ∞Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: <b>{lead['source']}</b>\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>\n"
        f"üîó <a href='https://crm.smartremont.kz/deal/{lead['id']}'>–û—Ç–∫—Ä—ã—Ç—å –≤ CRM</a>"
    )

    try:
        await bot.send_message(chat_id=CHAT_ID, text=text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_status():
    now = datetime.now(timezone(timedelta(hours=5)))
    diff = now - start_time
    hours, remainder = divmod(diff.total_seconds(), 3600)
    minutes = remainder // 60
    uptime = f"{int(hours)} —á {int(minutes)} –º–∏–Ω"

    msg = (
        f"üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è±Ô∏è –ê–ø—Ç–∞–π–º: <b>{uptime}</b>\n"
        f"üöÄ –°—Ç–∞—Ä—Ç –±—ã–ª: <b>{start_time.strftime('%H:%M:%S')}</b>"
    )

    await bot.send_message(chat_id=CHAT_ID, text=msg)

async def start_bot():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

async def stop_bot():
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.session.close()
